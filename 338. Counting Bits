338. Counting Bits
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate
the number of 1's in their binary representation and return them as an array.
Example:
For num = 5 you should return [0,1,1,2,1,2].
Follow up:
It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
Hint:
You should make use of what you have produced already.
Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.
Or does the odd/even status of the number help you in calculating the number of 1s?

//方法1：
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> Ans(num+1,0);//初始化0
        for(int i=1;i<=num;++i){//从1开始
            if(i%2==0)//偶数
                Ans[i]=Ans[i/2];
            else//奇数
                Ans[i]=Ans[i/2]+1;
        }
        return Ans;
    }
};

//方法2：
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> Ans(num+1,0);//初始化0
        for(int i=1;i<=num;++i)//从1开始
            Ans[i]=Ans[i&(i-1)]+1;//简化 不重复计算
        return Ans;
    }
};
