Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.

class NumArray {
private:
    vector<int> Sums;
public:
    NumArray(vector<int> &nums) {
        Sums.push_back(0);//为了让第一个元素一样处理
        for(int i=0;i<nums.size();++i)
            Sums.push_back(Sums.back()+nums[i]);
        
    }

    void update(int i, int val) {
        int orinNum=Sums[i+1]-Sums[i];
        int diff=val-orinNum;
        for(int j=i+1;j<Sums.size();++j)
            Sums[j]+=diff;
    }

    int sumRange(int i, int j) {
        return Sums[j+1]-Sums[i];
    }
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
